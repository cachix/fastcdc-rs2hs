cabal-version:      2.4
name:               fastcdc-hs
version:            0.1.0

-- A short (one-line) description of the package.
-- synopsis:

-- A longer description of the package.
-- description:

-- The license under which the package is released.
-- license:

-- The package author(s).
-- author:

-- An email address to which users can send suggestions, bug reports, and
-- patches.
-- maintainer:

-- A copyright notice.
-- copyright:


-- This let us hook Cabal steps to Setup.lhs script.
build-type:         Custom
custom-setup
    setup-depends:  Cabal, base, directory, filepath, process

-- Extra doc files to be distributed with the package, such as a CHANGELOG or a
-- README.
-- extra-doc-files:

-- Extra source files to be distributed with the package, such as examples, or
-- a tutorial module.
extra-source-files:
  bench/SekienAkashita.jpg
-- FIXME: It's still unclear to me what would be the best strategy to let users
-- publish packages generated by `cargo-cabal` on Hackage. While it is pretty
-- hazardous to put Rust code in sdist archive (because that would require that
-- the library end-user have a Rust developer environment on this machine and
-- that wouldn't play well with cross-compilation), is it a good idea to
-- package generated platform-dependent library as source?

common warnings
    ghc-options: -Wall

library
    import:           warnings
    exposed-modules:  FastCDC.V2020
    other-modules:   FastCDC.V2020.FFI
    default-extensions: DerivingStrategies, NamedFieldPuns
    build-depends:    base, bytestring
    hs-source-dirs:   src
    default-language: Haskell2010
    extra-bundled-libraries: fastcdc_rs_ffi

executable fastcdc
    import:           warnings
    main-is:          Main.hs
    build-depends:    base, fastcdc-hs
    hs-source-dirs:   fastcdc
    default-language: Haskell2010
    ghc-options:      -threaded -rtsopts -with-rtsopts=-N

benchmark fastcdc-bench
    import:           warnings
    main-is:          Main.hs
    type:             exitcode-stdio-1.0
    build-depends:    base, fastcdc-hs, criterion
    hs-source-dirs:   bench
    default-language: Haskell2010
    ghc-options:      -threaded -rtsopts -with-rtsopts=-N